name: A/B Test CI

on:
  push:
    branches: [main, develop, feat/ab-test-cosmic]
  pull_request:
    branches: [main, develop]

env:
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ vars.TURBO_TEAM }}

jobs:
  lint-and-type-check:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'
          
      - name: Install dependencies (no frozen lockfile)
        run: npm ci
        
      - name: Run linters
        run: npm run lint
        
      - name: Type check
        run: npm run type-check

  test-variants:
    name: Test UI (Circula only)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        variant: [ui-v2]
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'
          
      - name: Install dependencies (no frozen lockfile)
        run: npm ci
        
      - name: Build packages
        run: npm run build --workspace=@voai/${{ matrix.variant }}
        
      - name: Run tests for ${{ matrix.variant }}
        run: npm run test --workspace=@voai/${{ matrix.variant }}

  e2e-test-variants:
    name: E2E Tests (Circula)
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, test-variants]
    strategy:
      matrix:
        variant: [circula]
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'
          
      - name: Install dependencies (no frozen lockfile)
        run: npm ci
        
      - name: Install Playwright browsers
        run: npm exec playwright install --with-deps
        
      - name: Build all packages
        run: npm run build
        
      - name: Run E2E tests for ${{ matrix.variant }}
        run: |
          cd apps/showcase
          TEST_VARIANT=circula npm run test:e2e:variant
        env:
          TEST_VARIANT: ${{ matrix.variant }}
          
      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report-${{ matrix.variant }}
          path: playwright-report/
          retention-days: 30

  lighthouse-ci:
    name: Lighthouse CI (Circula)
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, test-variants]
    strategy:
      matrix:
        variant: [circula]
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'
          
      - name: Install dependencies (no frozen lockfile)
        run: npm ci
        
      - name: Build showcase app
        run: npm run build --workspace=showcase
        
      - name: Run Lighthouse CI for ${{ matrix.variant }}
        uses: treosh/lighthouse-ci-action@v10
        with:
           urls: |
             http://localhost:3002/
          uploadArtifacts: true
          temporaryPublicStorage: true
          configPath: ./apps/showcase/lighthouserc.js
        env:
          LHCI_BUILD_CONTEXT__CURRENT_BRANCH: ${{ github.ref_name }}
          LHCI_BUILD_CONTEXT__COMMIT_SHA: ${{ github.sha }}
          UI_VARIANT: circula

  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [e2e-test-variants, lighthouse-ci]
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'
          
      - name: Install Vercel CLI
        run: npm install -g vercel
        
      - name: Pull Vercel Environment
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
        
      - name: Build for both variants
        run: |
          # Build Classic variant
          UI_VARIANT=A vercel build --prod
          mv .vercel/output classic-output
          
          # Build Cosmic variant  
          UI_VARIANT=B vercel build --prod
          mv .vercel/output cosmic-output
          
      - name: Deploy both variants
        run: |
          # Deploy Classic
          mv classic-output .vercel/output
          CLASSIC_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          
          # Deploy Cosmic
          mv cosmic-output .vercel/output
          COSMIC_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          
          echo "Classic Preview: $CLASSIC_URL" >> $GITHUB_STEP_SUMMARY
          echo "Cosmic Preview: $COSMIC_URL" >> $GITHUB_STEP_SUMMARY