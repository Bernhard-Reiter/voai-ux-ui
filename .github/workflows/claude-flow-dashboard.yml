name: Claude Flow Dashboard Update

on:
  workflow_dispatch:
  schedule:
    - cron: '0 * * * *' # Every hour
  workflow_run:
    workflows: ["*"]
    types: [completed]

jobs:
  update-dashboard:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: read
      actions: read
    steps:
      - uses: actions/checkout@v4
      
      - name: Collect CI/CD Metrics
        id: metrics
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Collect metrics from last 24 hours
          SINCE=$(date -u -d '24 hours ago' +%Y-%m-%dT%H:%M:%SZ)
          
          # Workflow runs
          TOTAL_RUNS=$(gh run list --repo ${{ github.repository }} --created ">$SINCE" --json conclusion | jq length)
          SUCCESS_RUNS=$(gh run list --repo ${{ github.repository }} --created ">$SINCE" --json conclusion | jq '[.[] | select(.conclusion=="success")] | length')
          FAILED_RUNS=$(gh run list --repo ${{ github.repository }} --created ">$SINCE" --json conclusion | jq '[.[] | select(.conclusion=="failure")] | length')
          
          # PR metrics
          MERGED_PRS=$(gh pr list --repo ${{ github.repository }} --state merged --search "merged:>$SINCE" --json number | jq length)
          OPEN_PRS=$(gh pr list --repo ${{ github.repository }} --state open --json number | jq length)
          
          # Calculate success rate
          if [ $TOTAL_RUNS -gt 0 ]; then
            SUCCESS_RATE=$(( $SUCCESS_RUNS * 100 / $TOTAL_RUNS ))
          else
            SUCCESS_RATE=100
          fi
          
          echo "total_runs=$TOTAL_RUNS" >> $GITHUB_OUTPUT
          echo "success_runs=$SUCCESS_RUNS" >> $GITHUB_OUTPUT
          echo "failed_runs=$FAILED_RUNS" >> $GITHUB_OUTPUT
          echo "success_rate=$SUCCESS_RATE" >> $GITHUB_OUTPUT
          echo "merged_prs=$MERGED_PRS" >> $GITHUB_OUTPUT
          echo "open_prs=$OPEN_PRS" >> $GITHUB_OUTPUT

      - name: Update Dashboard Issue
        uses: actions/github-script@v6
        env:
          METRICS: ${{ toJSON(steps.metrics.outputs) }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const metrics = JSON.parse(process.env.METRICS);
            const date = new Date().toISOString();
            
            // Dashboard content
            const dashboard = `# üìä Claude Flow CI/CD Dashboard
            
            **Last Updated:** ${date}
            
            ## üöÄ 24-Hour Metrics
            
            | Metric | Value | Status |
            |--------|-------|--------|
            | Total Workflow Runs | ${metrics.total_runs} | ${metrics.total_runs > 0 ? '‚úÖ' : '‚ö†Ô∏è'} |
            | Successful Runs | ${metrics.success_runs} | ${metrics.success_rate >= 90 ? '‚úÖ' : '‚ö†Ô∏è'} |
            | Failed Runs | ${metrics.failed_runs} | ${metrics.failed_runs === '0' ? '‚úÖ' : 'üî¥'} |
            | Success Rate | ${metrics.success_rate}% | ${metrics.success_rate >= 90 ? '‚úÖ' : '‚ö†Ô∏è'} |
            | PRs Merged | ${metrics.merged_prs} | ‚úÖ |
            | Open PRs | ${metrics.open_prs} | ${metrics.open_prs < 10 ? '‚úÖ' : '‚ö†Ô∏è'} |
            
            ## ü§ñ Claude Flow Status
            
            - **Auto-Merge:** ‚úÖ Active
            - **Monitoring:** ‚úÖ Every 15 minutes
            - **Deployment:** ‚úÖ Auto-deploy on merge
            
            ## üìà Recent Activity
            
            View detailed activity in the [Actions tab](https://github.com/${context.repo.owner}/${context.repo.repo}/actions)
            
            ---
            
            *This dashboard is automatically updated by Claude Flow*`;
            
            // Find or create dashboard issue
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'claude-flow-dashboard',
              state: 'open'
            });
            
            if (issues.data.length > 0) {
              // Update existing issue
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issues.data[0].number,
                body: dashboard
              });
            } else {
              // Create new issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'üìä Claude Flow CI/CD Dashboard',
                body: dashboard,
                labels: ['claude-flow-dashboard'],
                pinned: true
              });
            }

      - name: Send Claude Flow Analytics
        env:
          CLAUDE_FLOW_API_KEY: ${{ secrets.CLAUDE_FLOW_API_KEY }}
          METRICS: ${{ toJSON(steps.metrics.outputs) }}
        run: |
          curl -X POST https://api.claude-flow.com/analytics \
            -H "Authorization: Bearer $CLAUDE_FLOW_API_KEY" \
            -H "Content-Type: application/json" \
            -d "{
              \"repo\": \"${{ github.repository }}\",
              \"metrics\": $METRICS,
              \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"
            }"