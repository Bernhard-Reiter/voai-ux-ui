name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

permissions:
  contents: read
  pull-requests: write
  security-events: write

env:
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ vars.TURBO_TEAM }}
  NODE_OPTIONS: --max-old-space-size=4096

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        node-version: [20]
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v3
        with:
          version: 8

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - run: pnpm install --frozen-lockfile

      - run: pnpm turbo run lint --concurrency=2

      - name: Upload lint results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: lint-results
          path: |
            **/*.log
            **/lint-results.json
          retention-days: 3

  type-check:
    name: Type Check
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        node-version: [20]
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v3
        with:
          version: 8

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - run: pnpm install --frozen-lockfile

      - run: pnpm turbo run type-check --concurrency=2

      - name: Upload type-check results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: type-check-results
          path: |
            **/tsconfig.tsbuildinfo
            **/*.log
          retention-days: 3

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        node-version: [20]
    env:
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
      N8N_API_URL: ${{ secrets.N8N_API_URL }}
      N8N_API_KEY: ${{ secrets.N8N_API_KEY }}
      N8N_WEBHOOK_URL: ${{ secrets.N8N_WEBHOOK_URL }}

    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v3
        with:
          version: 8

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - run: pnpm install --frozen-lockfile

      - run: pnpm turbo run test -- --coverage --maxWorkers=2

      - uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          fail_ci_if_error: false

      - name: Upload test results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            **/coverage/
            **/*.log
          retention-days: 3

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        node-version: [20]
    env:
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
      N8N_API_URL: ${{ secrets.N8N_API_URL }}
      N8N_API_KEY: ${{ secrets.N8N_API_KEY }}
      N8N_WEBHOOK_URL: ${{ secrets.N8N_WEBHOOK_URL }}

    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v3
        with:
          version: 8

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - run: pnpm install --frozen-lockfile

      - name: Install Playwright
        run: npx playwright install chromium

      - name: Run integration tests
        run: pnpm turbo run test:integration -- --workers=2

      - name: Upload integration test results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: |
            **/test-results/
            **/playwright-report/
            **/*.log
          retention-days: 3

  visual-regression:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      matrix:
        node-version: [20]
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v3
        with:
          version: 8

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - run: pnpm install --frozen-lockfile

      - name: Build Storybook
        run: pnpm sb:build

      - name: Install test dependencies
        run: |
          pnpm add -D -w serve
          npx playwright install chromium

      - name: Run visual tests
        run: |
          npx serve -l 6006 packages/ui/storybook-static &
          sleep 5
          cd packages/ui && npx test-storybook --url http://localhost:6006 --maxWorkers=2

      - name: Upload visual diffs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: visual-diffs
          path: |
            __visual_diffs__/
            **/*.log
          retention-days: 3

      # Chromatic placeholder - activate when team grows
      # - name: Chromatic (activate when team grows)
      #   if: env.CHROMATIC_PROJECT_TOKEN != ''
      #   uses: chromaui/action@v3
      #   with:
      #     projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
      #     storybookBuildDir: packages/ui/storybook-static

  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        node-version: [20]
    env:
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v3
        with:
          version: 8

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - run: pnpm install --frozen-lockfile

      - run: pnpm turbo run build --concurrency=2

      - uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: apps/frontend/out
          retention-days: 1

      - name: Upload build logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: |
            **/.next/
            **/*.log
          retention-days: 3

  lighthouse:
    name: Lighthouse Performance
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        node-version: [20]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: build-output
          path: apps/frontend/out

      - uses: pnpm/action-setup@v3
        with:
          version: 8

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - run: pnpm install --frozen-lockfile

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: ./lighthouse.config.js
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Lighthouse Quality Gate
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const fs = require('fs');
            const results = JSON.parse(fs.readFileSync('.lighthouseci/lhr-*.json', 'utf8'));
            const scores = results.categories;

            const thresholds = {
              performance: 0.8,
              accessibility: 0.9,
              'best-practices': 0.9,
              seo: 0.9
            };

            let failed = false;
            for (const [category, threshold] of Object.entries(thresholds)) {
              if (scores[category].score < threshold) {
                console.error(`${category} score ${scores[category].score} is below threshold ${threshold}`);
                failed = true;
              }
            }

            if (failed) {
              core.setFailed('Lighthouse scores below threshold');
            }

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20]
    steps:
      - uses: actions/checkout@v4

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN || '' }}
        with:
          args: --severity-threshold=high

      - name: Run npm audit
        run: |
          pnpm audit --audit-level=high || true

      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          allow_issue_writing: false
          fail_action: false

      - name: Upload ZAP scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-scan-results
          path: |
            zap_report.html
            zap.yaml
          retention-days: 3

  deploy-preview:
    name: Deploy to Vercel Preview
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [lint, type-check, test, build]
    environment: preview
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v3
        with:
          version: 8

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - run: pnpm install --frozen-lockfile

      - run: pnpm turbo run build

      - name: Deploy to Vercel Preview
        uses: amondnet/vercel-action@v25
        id: vercel-deploy
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./

      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Preview deployed to: ${{ steps.vercel-deploy.outputs.preview-url }}`
            })

  deploy-production:
    name: Deploy to Vercel Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [lint, type-check, test, integration-test, build, lighthouse, security-scan]
    environment: production
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v3
        with:
          version: 8

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - run: pnpm install --frozen-lockfile

      - run: pnpm turbo run build

      - name: Deploy to Vercel Production
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./

  quality-gate:
    name: Quality Gate Check
    runs-on: ubuntu-latest
    if: always()
    needs: [lint, type-check, test, integration-test, build]
    steps:
      - name: Check Quality Gate Status
        uses: actions/github-script@v7
        with:
          script: |
            const jobs = ${{ toJSON(needs) }};
            const failedJobs = Object.entries(jobs)
              .filter(([_, job]) => job.result === 'failure')
              .map(([name, _]) => name);

            if (failedJobs.length > 0) {
              core.setFailed(`Quality gate failed. Failed jobs: ${failedJobs.join(', ')}`);
            } else {
              console.log('All quality gates passed!');
            }
